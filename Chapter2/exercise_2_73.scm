(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))


(define (install-sum-deriv)
  (define (deriv-sum operands var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))
  (define (tag x) (attach-tag '+ x))
  (define (make-sum x y) (list '+ x y))
  (put 'deriv '(+) deriv-sum)
  'done)


(define (install-prod-deriv)
  (define (deriv-product exp var) 
    (make-sum (make-product (multiplier exp)
                            (deriv (multiplicand exp) var))
              (make-product (deriv (multiplier exp) var)
                            (multiplicand exp))))
  (define (multiplier p) (cadr p)) 
  (define (multiplicand p) (caddr p))
  (put 'deriv '(*) deriv-product)
  'done)
